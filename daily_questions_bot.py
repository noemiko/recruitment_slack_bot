import os
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
import schedule
import time

import os
import random
from dotenv import load_dotenv


load_dotenv()

slack_token = os.environ['SLACK_TOKEN']
channel_id = os.environ['CHANNEL_ID']

# Pytania rekrutacyjne
questions = [
    # source https://adevait.com/python/interview-questions
    '''Is this valid in Python and why?
    def my_function():
        print my_function.what
        my_function.what = "right?"
        my_function() # Prints "right?
    ''',
    "What's the difference between a tuple and a list?",
    "What is a dict and what's its most important limitation?",
    "What is a 'callable'?",
    "Using list comprehension, print the odd numbers between 0 and 100.",
    "What is pickling/unpickling?",
    "What's a generator?",
    "Explain the use of decorators.",
    "Write a simple decorator.",
    "Suppose lst is [2, 33, 222, 14, 25], What is lst[-1]?",
    "Given the list lst = [1, 2, 3, 4, 4, 6, 7, 3, 4, 5, 2, 7], return only the unique values in the list",
    "What's lambda?",
    "Explain *args and **kwargs",

    "Given variables a and b, switch their values so that b has the value of a, and a has the value of b without using an intermediary variable.",
    "How would you xor in Python?",
    "One thing about python OOP is that it doesn't support true private attributes/methods. How do we circumvent this limitation?",
    "What's a Mixin?",
    "What's a metaclass?",
    "What are the Dunder/Magic/Special methods in Python? Name a few.",
    "What is PEP8?",
    "What is pip?",
    "CheeseShop? What is that?",
    "What are virtualenvs?",
    "What are modules and packages in Python?",
    "Tabs or Spaces?",
    # https://luminousmen.com/post/python-interview-questions-junior
    "What is @classmethod, @staticmethod, @property?",
    "Can you write multithreading applications in Python? What is the difference between multithreading and multiprocessing?",
    "Explain how to make a Python script executable on Unix?",
    "What's the difference between globals(), locals(), and vars()?",
    "Is it possible to have a negative index in iterative types in Python?",
    "How do I view object methods?"
    # generated by chat gpt
    
    "What is Python and why is it popular?",
    "Explain the differences between Python 2 and Python 3.",
    "How is memory managed in Python?",
    "Describe the Global Interpreter Lock (GIL) and its impact on multi-threading.",
    
    "Describe the main data types in Python.",
    "How do you convert a string to an integer in Python?",
    "What is the difference between a list and a tuple?",
    "Explain the concept of mutability in Python.",
    
    "How does Python handle conditional statements?",
    "Explain the purpose of the `pass` statement.",
    "What is the purpose of the `range()` function?",
    "Describe the use of `break` and `continue` in loops.",

    "How do you define a function in Python?",
    "Explain the difference between parameters and arguments.",
    "What is a lambda function and when would you use it?",
    "Describe the purpose of the `*args` and `**kwargs` in function definitions.",
    
    "What is OOP, and how is it implemented in Python?",
    "Explain the concepts of encapsulation, inheritance, and polymorphism.",
    "Describe the difference between a class and an object.",
    "How does method overloading and method overriding work in Python?",
    
    "How do you handle exceptions in Python?",
    "Explain the purpose of `try`, `except`, `else`, and `finally`.",
    "What is the `raise` statement used for?",
    
    "How do you open and close a file in Python?",
    "Explain the difference between reading and writing modes in file handling.",
    "What is the purpose of the `with` statement?",
    
    "Describe the difference between a module and a package.",
    "How do you import modules in Python?",
    "Explain the significance of `__init__.py` in a directory.",
    
    "Name some popular libraries in Python for data science.",
    "What is the purpose of NumPy and pandas?",
    "How do you install external libraries in Python?",
    
    "Explain the role of frameworks like Django and Flask in web development.",
    "What is WSGI, and how is it related to web development in Python?",
    "Describe the purpose of virtual environments.",
    # chat gpt about http and api
    "What is HTTP, and how does it work?",
    "Explain the difference between HTTP and HTTPS.",
    "What are HTTP methods (verbs) and their significance? Give examples.",
    
    "What is REST, and how does it relate to APIs?",
    "Explain the characteristics of a RESTful API.",
    "Describe the role of URI, URI parameters, and payload in RESTful APIs.",
    "What are the advantages of using RESTful APIs?",
    
    "Explain the purpose of HTTP status codes.",
    "Provide examples of common HTTP status codes and their meanings.",
    "What does a 404 status code indicate?",
    
    "Describe the structure of an HTTP request.",
    "What is the purpose of headers in an HTTP request?",
    "Explain the components of an HTTP response.",
    
    "Describe common methods for API authentication.",
    "What is the purpose of API keys, and how are they used for authentication?",
    "Explain the concept of OAuth and its role in API authentication.",
    
    "What is JSON, and how is it used in HTTP requests and responses?",
    "Explain the role of XML in APIs.",
    "Compare JSON and XML. When would you choose one over the other?",
    
    "How do you make an HTTP GET request in Python using the `requests` library?",
    "Explain the use of parameters in an HTTP request.",
    "Demonstrate how to handle authentication in a Python HTTP request.",
    
    "What is Flask, and how is it used for API development?",
    "Explain how Django REST Framework simplifies API development in Django.",
    "Compare Flask and Django in the context of API development.",
    
    "What is Swagger (OpenAPI), and how does it facilitate API development?",
    "Describe the purpose of API documentation.",
    
    "How should errors be handled in API responses?",
    "Explain the role of HTTP status codes in indicating errors."
]

def send_daily_question():
    random_question = random.choice(questions)


    client = WebClient(token=slack_token)

    try:
        response = client.chat_postMessage(
            channel=channel_id,
            text=random_question
        )
        print(f"Wiadomość wysłana: {response['ts']}")
    except SlackApiError as e:
        print(f"Błąd podczas wysyłania wiadomości: {e.response['error']}")
send_daily_question()

# schedule.every(1).minutes.do(send_daily_question)

# while True:
#     schedule.run_pending()
#     time.sleep(1)
